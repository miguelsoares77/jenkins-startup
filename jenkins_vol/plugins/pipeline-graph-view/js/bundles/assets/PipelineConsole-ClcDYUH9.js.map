{"version":3,"mappings":"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","names":["items","className","visible","setVisible","useState","show","hide","jsx","index","item","isValidElement","dropdownItem","jsxs","DefaultDropdownProps","children","container","height","StagesCustomization","mainViewVisibility","setMainViewVisibility","stageViewPosition","setStageViewPosition","isMobile","useLayoutPreferences","handleViewChange","e","handlePositionChange","Fragment","ViewIcon","MainViewVisibility","StageViewPosition","Filter","visibleStatuses","toggleStatus","resetStatuses","allVisible","Result","Tooltip","Tippy","statuses","classNames","disabled","DataTreeView","stages","search","filterStageTree","useCallback","event","nodeId","onNodeSelect","filteredStages","stage","TreeNode","selected","memo","hasSelectedDescendant","child","handleToggleClick","setIsExpanded","useEffect","isSelected","isExpanded","Total","hasChildren","onSelect","filteredChildren","LOG_FETCH_SIZE","POLL_INTERVAL","useStepsPoller","run","useRunPoller","props","openStage","setOpenStage","steps","stepBuffers","updateStepConsoleOffset","forceUpdate","startByte","stepBuffer","getConsoleTextOffset","stepId","response","newLogLines","prev","parseUrlParams","params","setUserManuallySetNode","expanded","step","setExpandedSteps","getDefaultSelectedStep","userManuallySetNode","selectedStep","stepResult","selectedStepResult","defaultStep","startPollingPipeline","setSteps","data","stepsRef","error","handleStageSelect","stepsForStage","lastStep","newlyExpandedSteps","expandedSteps","id","stageId","getStageStepBuffers","buffers","findStage","result","getStageSteps","onStepToggle","onData","polling","checkComplete","interval","ScrollToTopBottom","isScrollable","setIsScrollable","updateScrollState","scrollTop","windowHeight","docHeight","atTop","distanceFromBottom","observer","scrollToBottom","setTreeViewWidth","setStageViewWidth","treeViewWidth","stageViewWidth","stageViewHeight","direction","storageKey","setIsDragging","isVertical","initialSize","setPanelSize","panelSize","dividerRef","useRef","startDragging","stopDragging","handleDragging","newSize","getContainerOffset","clampedSize","setStageViewHeight","handleDoubleClick","resetSize","containerRef","rect","Children","childrenArray","gridTemplate","StageNodeLink","agent","getAgentUrl","name","href","agentName","DOCUMENT","StageDetails","StatusIcon","Started","Paused","Dropdown","ConsoleLogStream","lazy","ConsoleLogCard","showMoreLogs"],"ignoreList":[],"sources":["../../../../frontend/common/components/dropdown.tsx","../../../../frontend/common/components/dropdown-portal.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../../frontend/common/components/filter.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/StageNodeLink.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/symbols.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/stage-details.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLogCard.tsx"],"sourcesContent":["import Tippy, { TippyProps } from \"@tippyjs/react\";\nimport { isValidElement, ReactElement, ReactNode, useState } from \"react\";\n\nimport Tooltip from \"./tooltip.tsx\";\n\n/**\n * A customized (and customizable) implementation of Tippy dropdowns\n */\nexport default function Dropdown({\n  items,\n  disabled,\n  className,\n}: DropdownProps) {\n  const [visible, setVisible] = useState(false);\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"More actions\"}>\n      <Tippy\n        visible={visible}\n        onClickOutside={hide}\n        {...DefaultDropdownProps}\n        content={\n          <div className=\"jenkins-dropdown\">\n            {items.map((item, index) => {\n              if (item === \"separator\") {\n                return (\n                  <div\n                    key={`separator-${index}`}\n                    className=\"jenkins-dropdown__separator\"\n                  />\n                );\n              }\n\n              if (isValidElement(item)) {\n                return (\n                  <div key={index} className=\"jenkins-dropdown__custom-item\">\n                    {item}\n                  </div>\n                );\n              }\n\n              const dropdownItem = item as DropdownItem;\n              return (\n                <a\n                  key={index}\n                  className=\"jenkins-dropdown__item\"\n                  href={dropdownItem.href}\n                  target={dropdownItem.target}\n                  download={dropdownItem.download}\n                >\n                  <div className=\"jenkins-dropdown__item__icon\">\n                    {dropdownItem.icon}\n                  </div>\n                  {dropdownItem.text}\n                </a>\n              );\n            })}\n          </div>\n        }\n      >\n        <button\n          className={\"jenkins-button \" + className}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <div className=\"jenkins-overflow-button__ellipsis\">\n            <span />\n            <span />\n            <span />\n          </div>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\nexport const DefaultDropdownProps: TippyProps = {\n  theme: \"dropdown\",\n  duration: 250,\n  touch: true,\n  animation: \"dropdown\",\n  interactive: true,\n  offset: [0, 0],\n  placement: \"bottom-start\",\n  arrow: false,\n};\n\ninterface DropdownProps {\n  items: (DropdownItem | ReactElement | \"separator\")[];\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface DropdownItem {\n  text: string;\n  href?: string;\n  icon: ReactNode;\n  target?: string;\n  download?: string;\n}\n","import { ReactNode } from \"react\";\nimport { createPortal } from \"react-dom\";\n\ninterface DropdownPortalProps {\n  children: ReactNode;\n}\n\nexport default function DropdownPortal({ children }: DropdownPortalProps) {\n  const container = document.getElementById(\"console-pipeline-overflow-root\");\n\n  if (!container) {\n    console.error(\"DropdownPortal: Target container not found!\");\n    return null;\n  }\n\n  return createPortal(children, container);\n}\n","import \"./skeleton.scss\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport { ChangeEvent } from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n    isMobile,\n  } = useLayoutPreferences();\n\n  if (isMobile) {\n    return null;\n  }\n\n  const handleViewChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n      <div className=\"jenkins-dropdown__separator\" />\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport {\n  memo,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: ReactMouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <div id=\"tasks\" style={{ marginLeft: \"0.7rem\" }}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst TreeNode = memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage),\n  );\n\n  function hasSelectedDescendant(stage: StageInfo): boolean {\n    return stage.children?.some(\n      (child) => String(child.id) === selected || hasSelectedDescendant(child),\n    );\n  }\n\n  const handleToggleClick = (e: ReactMouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage)) {\n      setIsExpanded(true);\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible]);\n\n  return (\n    <div className=\"task\">\n      <div className=\"pgv-tree-node-header\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", \"task-link\", {\n            \"task-link--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n        >\n          <div>\n            <span className=\"task-icon-link\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </span>\n            <span className=\"task-link-text\">{stage.name}</span>\n            <span className=\"pgv-tree-item__description\">\n              <Total ms={stage.totalDurationMillis} />\n            </span>\n          </div>\n        </a>\n\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-toggle-icon\", {\n              \"pgv-toggle-icon--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          {stage.children.map((child) => (\n            <TreeNode\n              key={child.id}\n              stage={child}\n              selected={selected}\n              onSelect={onSelect}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: ReactMouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: ReactMouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getRunSteps,\n  LOG_FETCH_SIZE,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../PipelineConsoleModel.tsx\";\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  const [userManuallySetNode, setUserManuallySetNode] = useState(false);\n\n  const stepsRef = useRef<StepInfo[]>([]);\n\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffer = stepBuffers.get(stepId) ?? {\n        lines: [],\n        startByte: 0 - LOG_FETCH_SIZE,\n        endByte: -1,\n        stepId,\n      };\n      if (stepBuffer.startByte > 0 && !forceUpdate) return;\n      const response = await getConsoleTextOffset(stepId, startByte);\n      if (!response) return;\n\n      const newLogLines = response.text.trim().split(\"\\n\") || [];\n\n      if (stepBuffer.endByte > 0 && stepBuffer.endByte <= startByte) {\n        stepBuffer.lines = [...stepBuffer.lines, ...newLogLines];\n      } else {\n        stepBuffer.lines = newLogLines;\n        stepBuffer.startByte = response.startByte;\n      }\n\n      stepBuffer.endByte = response.endByte;\n\n      setStepBuffers((prev) => new Map(prev).set(stepId, stepBuffer));\n    },\n    [],\n  );\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n\n      setUserManuallySetNode(true);\n\n      const step = steps.find((s) => s.id === selected);\n      const expanded: string[] = [];\n\n      if (step) {\n        selected = step.stageId;\n        expanded.push(step.id);\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${0 - LOG_FETCH_SIZE}`),\n        );\n      }\n\n      setOpenStage(selected);\n      setExpandedSteps(expanded);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = (steps: StepInfo[]) => {\n    if (userManuallySetNode) {\n      return;\n    }\n\n    let selectedStep = steps.find((step) => step !== undefined);\n    if (!steps || steps.length === 0 || !selectedStep) {\n      return null;\n    }\n    for (const step of steps) {\n      const stepResult = step.state.toLowerCase() as Result;\n      const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n      switch (stepResult) {\n        case Result.running:\n        case Result.queued:\n        case Result.paused:\n          // Return first running/queued/paused step.\n          return step;\n        case Result.unstable:\n        case Result.failure:\n        case Result.aborted:\n          if (selectedStepResult && stepResult < selectedStepResult) {\n            // Return first unstable/failed/aborted step which has a state worse than the selectedStep.\n            // E.g. if the first step state is failure we want to return that over a later unstable step.\n            return step;\n          }\n          continue;\n        default:\n          // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n          if (selectedStepResult && stepResult <= selectedStepResult) {\n            selectedStep = step;\n          }\n      }\n    }\n    return selectedStep;\n  };\n\n  useEffect(() => {\n    getRunSteps()\n      .then((steps) => {\n        steps = steps || [];\n        setSteps(steps);\n\n        const usedUrl = parseUrlParams(steps);\n        if (!usedUrl) {\n          const defaultStep = getDefaultSelectedStep(steps);\n          if (defaultStep) {\n            setOpenStage(defaultStep.stageId);\n\n            if (defaultStep.stageId) {\n              setExpandedSteps((prev) => [...prev, defaultStep.id]);\n              updateStepConsoleOffset(\n                defaultStep.id,\n                false,\n                0 - LOG_FETCH_SIZE,\n              );\n            }\n          }\n        }\n\n        if (!run?.complete) {\n          startPollingPipeline({\n            getStateUpdateFn: getRunSteps,\n            onData: (data) => {\n              const hasNewSteps =\n                JSON.stringify(stepsRef.current) !== JSON.stringify(data);\n\n              if (userManuallySetNode) {\n                const defaultStep = getDefaultSelectedStep(steps);\n                if (defaultStep) {\n                  setOpenStage(defaultStep.stageId);\n\n                  if (defaultStep.stageId) {\n                    setExpandedSteps((prev) => [...prev, defaultStep.id]);\n                    updateStepConsoleOffset(\n                      defaultStep.id,\n                      false,\n                      0 - LOG_FETCH_SIZE,\n                    );\n                  }\n                }\n              }\n\n              if (hasNewSteps) {\n                setSteps(data);\n                stepsRef.current = data;\n              }\n            },\n            checkComplete: () => !run?.complete,\n            interval: POLL_INTERVAL,\n          });\n        }\n        return null;\n      })\n      .catch((error) => {\n        console.error(\"Error in getRunSteps:\", error);\n      });\n  }, [run?.stages]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      setUserManuallySetNode(true);\n\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n      const newlyExpandedSteps = lastStep ? [lastStep.id] : [];\n\n      history.replaceState({}, \"\", `?selected-node=` + nodeId);\n\n      setOpenStage(nodeId);\n      setExpandedSteps((prev) => [...prev, ...newlyExpandedSteps]);\n\n      if (lastStep) {\n        updateStepConsoleOffset(lastStep.id, false, 0 - LOG_FETCH_SIZE);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    setUserManuallySetNode(true);\n    if (!expandedSteps.includes(nodeId)) {\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, 0 - LOG_FETCH_SIZE);\n    } else {\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = (nodeId: string, startByte: number) => {\n    updateStepConsoleOffset(nodeId, true, startByte);\n  };\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  };\n}\n\n/**\n * Starts polling a function until a complete condition is met.\n */\nconst startPollingPipeline = ({\n  getStateUpdateFn,\n  onData,\n  checkComplete,\n  interval = 1000,\n}: {\n  getStateUpdateFn: () => Promise<StepInfo[] | null>;\n  onData: (data: StepInfo[]) => void;\n  checkComplete: (data: StepInfo[]) => boolean;\n  interval?: number;\n}): (() => void) => {\n  let polling = true;\n\n  const poll = async () => {\n    while (polling) {\n      const data = (await getStateUpdateFn()) || [];\n      onData(data);\n\n      if (checkComplete(data)) {\n        polling = false;\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n  };\n\n  setTimeout(poll, interval);\n\n  return () => {\n    polling = false;\n  };\n};\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n\n      // Distance from bottom\n      const distanceFromBottom = docHeight - (scrollTop + windowHeight);\n\n      // Only trigger the offset if we're within 20px from the bottom\n      const offset = Math.max(0, Math.min(100, 100 - distanceFromBottom));\n\n      const root = document.documentElement;\n      root.style.setProperty(\"--pgv-offset-bottom\", `${offset}px`);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport {\n  Children,\n  MouseEvent as ReactMouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: ReactMouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div\n        className={classNames(\"pgv-split-view__side-panel\", {\n          \"pgv-split-view__side-panel--vertical\": direction === \"vertical\",\n        })}\n      >\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n","export default function StageNodeLink({ agent }: StageNodeLinkProps) {\n  if (!agent) {\n    return null;\n  }\n\n  const agentName = agent === \"built-in\" ? \"Jenkins\" : agent;\n  const href = getAgentUrl(agent);\n\n  function getAgentUrl(name: string) {\n    // Wrap built-in in brackets\n    const id = name === \"built-in\" ? \"(built-in)\" : name;\n    const rootPath = document.head.dataset.rooturl;\n    return `${rootPath}/computer/${id}/`;\n  }\n\n  return (\n    <li className={\"jenkins-mobile-hide\"}>\n      <a\n        href={href}\n        className={\"jenkins-button jenkins-button--tertiary\"}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <svg\n          width=\"512px\"\n          height=\"512px\"\n          viewBox=\"0 0 512 512\"\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            strokeLinejoin=\"round\"\n          >\n            <g\n              transform=\"translate(32.000000, 64.000000)\"\n              stroke=\"currentColor\"\n              strokeWidth=\"32\"\n            >\n              <rect x=\"0\" y=\"0\" width=\"448\" height=\"320\" rx=\"32\" />\n              <polygon\n                strokeLinecap=\"round\"\n                fillRule=\"nonzero\"\n                points=\"272 384 264 320 184 320 176 384\"\n              />\n              <line x1=\"336\" y1=\"384\" x2=\"112\" y2=\"384\" strokeLinecap=\"round\" />\n            </g>\n          </g>\n        </svg>\n        {agentName}\n      </a>\n    </li>\n  );\n}\n\ninterface StageNodeLinkProps {\n  agent?: string;\n}\n","export const DOCUMENT = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <path\n      d=\"M416 221.25V416a48 48 0 01-48 48H144a48 48 0 01-48-48V96a48 48 0 0148-48h98.75a32 32 0 0122.62 9.37l141.26 141.26a32 32 0 019.37 22.62z\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n    <path\n      d=\"M256 56v120a32 32 0 0032 32h120M176 288h160M176 368h160\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n  </svg>\n);\n\nexport const CONSOLE = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n    <rect\n      x=\"32\"\n      y=\"48\"\n      width=\"448\"\n      height=\"416\"\n      rx=\"48\"\n      ry=\"48\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n    />\n    <path\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"32\"\n      d=\"M96 112l80 64-80 64M192 240h64\"\n    />\n  </svg>\n);\n","import \"./stage-details.scss\";\n\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport StatusIcon, {\n  resultToColor,\n} from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport {\n  exact,\n  Paused,\n  Started,\n  Total,\n} from \"../../../common/utils/timings.tsx\";\nimport { StageInfo } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport StageNodeLink from \"./StageNodeLink.tsx\";\nimport { DOCUMENT } from \"./symbols.tsx\";\n\nexport default function StageDetails({ stage }: StageDetailsProps) {\n  if (!stage) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\n        \"pgv-stage-details \" + resultToColor(stage.state, stage.skeleton)\n      }\n    >\n      {stage.state === \"running\" && (\n        <div className={\"pgv-stage-details__running\"} />\n      )}\n      <div>\n        <StatusIcon\n          status={stage.state}\n          skeleton={stage.skeleton}\n          percentage={stage.completePercent}\n        />\n        <h2>{stage.name}</h2>\n      </div>\n      <ul>\n        <li>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              d=\"M112.91 128A191.85 191.85 0 0064 254c-1.18 106.35 85.65 193.8 192 194 106.2.2 192-85.83 192-192 0-104.54-83.55-189.61-187.5-192a4.36 4.36 0 00-4.5 4.37V152\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M233.38 278.63l-79-113a8.13 8.13 0 0111.32-11.32l113 79a32.5 32.5 0 01-37.25 53.26 33.21 33.21 0 01-8.07-7.94z\"\n              fill=\"currentColor\"\n            />\n          </svg>\n          <Total ms={stage.totalDurationMillis} />\n        </li>\n        <li>\n          <Tooltip content={exact(stage.startTimeMillis)}>\n            <span>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                <path\n                  d=\"M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64z\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"32\"\n                />\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth=\"32\"\n                  d=\"M256 128v144h96\"\n                />\n              </svg>\n              <Started since={stage.startTimeMillis} />\n            </span>\n          </Tooltip>\n        </li>\n        {stage.pauseDurationMillis !== 0 && (\n          <li className={\"jenkins-mobile-hide\"}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M145.61 464h220.78c19.8 0 35.55-16.29 33.42-35.06C386.06 308 304 310 304 256s83.11-51 95.8-172.94c2-18.78-13.61-35.06-33.41-35.06H145.61c-19.8 0-35.37 16.28-33.41 35.06C124.89 205 208 201 208 256s-82.06 52-95.8 172.94c-2.14 18.77 13.61 35.06 33.41 35.06z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n              <path\n                d=\"M343.3 432H169.13c-15.6 0-20-18-9.06-29.16C186.55 376 240 356.78 240 326V224c0-19.85-38-35-61.51-67.2-3.88-5.31-3.49-12.8 6.37-12.8h142.73c8.41 0 10.23 7.43 6.4 12.75C310.82 189 272 204.05 272 224v102c0 30.53 55.71 47 80.4 76.87 9.95 12.04 6.47 29.13-9.1 29.13z\"\n                fill=\"currentColor\"\n              />\n            </svg>\n            <Paused since={stage.pauseDurationMillis} />\n          </li>\n        )}\n        <StageNodeLink agent={stage.agent} />\n        <li>\n          <Dropdown\n            className={\"jenkins-button--tertiary\"}\n            disabled={stage.synthetic}\n            items={[\n              {\n                text: \"View stage as plain text\",\n                icon: DOCUMENT,\n                href: `log?nodeId=${stage.id}`,\n                target: \"_blank\",\n              },\n              {\n                text: \"Download stage logs\",\n                icon: (\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                    <path\n                      d=\"M336 176h40a40 40 0 0140 40v208a40 40 0 01-40 40H136a40 40 0 01-40-40V216a40 40 0 0140-40h40\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                    />\n                    <path\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth=\"32\"\n                      d=\"M176 272l80 80 80-80M256 48v288\"\n                    />\n                  </svg>\n                ),\n                href: `log?nodeId=${stage.id}`,\n                download: `${stage.name}.txt`,\n              },\n            ]}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\ninterface StageDetailsProps {\n  stage: StageInfo | null;\n}\n","import \"./console-log-card.scss\";\n\nimport {\n  lazy,\n  MouseEvent as ReactMouseEvent,\n  Suspense,\n  useEffect,\n} from \"react\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  LOG_FETCH_SIZE,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nexport default function ConsoleLogCard(props: ConsoleLogCardProps) {\n  useEffect(() => {\n    if (props.isExpanded) {\n      props.onMoreConsoleClick(props.step.id, props.stepBuffer.startByte);\n    }\n  }, [props.isExpanded]);\n\n  const handleToggle = (e: ReactMouseEvent<HTMLElement>) => {\n    // Only prevent left clicks\n    if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    history.replaceState({}, \"\", `?selected-node=` + props.step.id);\n\n    props.onStepToggle(props.step.id);\n  };\n\n  const showMoreLogs = () => {\n    let startByte = props.stepBuffer.startByte - LOG_FETCH_SIZE;\n    if (startByte < 0) startByte = 0;\n    props.onMoreConsoleClick(props.step.id, startByte);\n  };\n\n  const getTruncatedLogWarning = () => {\n    if (props.stepBuffer.lines && props.stepBuffer.startByte > 0) {\n      return (\n        <button\n          onClick={showMoreLogs}\n          className={\n            \"pgv-show-more-logs jenkins-button jenkins-!-warning-color\"\n          }\n        >\n          There’s more to see - {prettySizeString(props.stepBuffer.startByte)}{\" \"}\n          of logs hidden\n        </button>\n      );\n    }\n    return undefined;\n  };\n\n  const prettySizeString = (size: number) => {\n    const kib = 1024;\n    const mib = 1024 * 1024;\n    const gib = 1024 * 1024 * 1024;\n    if (size < kib) return `${size}B`;\n    if (size < mib) return `${(size / kib).toFixed(2)}KiB`;\n    if (size < gib) return `${(size / mib).toFixed(2)}MiB`;\n    return `${(size / gib).toFixed(2)}GiB`;\n  };\n\n  return (\n    <div className={\"pgv-step-detail-group\"} key={`step-card-${props.step.id}`}>\n      <div\n        className={classNames(\"pgv-step-detail-header\", \"jenkins-button\", {\n          \"jenkins-button--tertiary\": !props.isExpanded,\n        })}\n      >\n        <a\n          href={`?selected-node=` + props.step.id}\n          onClick={handleToggle}\n          key={`step-action-area-${props.step.id}`}\n        >\n          <div className=\"pgv-step-detail-header__content\">\n            <StatusIcon\n              status={props.step.state}\n              percentage={props.step.completePercent}\n            />\n\n            {props.step.title !== \"\" && <span>{props.step.title}</span>}\n\n            {props.step.name !== \"\" && <span>{props.step.name}</span>}\n\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n              className={\"pgv-step-detail-header__chevron\"}\n              style={{ rotate: props.isExpanded ? \"90deg\" : \"0deg\" }}\n            >\n              <path\n                fill=\"none\"\n                stroke=\"var(--text-color-secondary)\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                opacity={0.75}\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </div>\n\n          <div className=\"pgv-step-detail-header__actions\">\n            <span\n              style={{\n                color: \"var(--text-color-secondary)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              <Total ms={props.step.totalDurationMillis} />\n            </span>\n          </div>\n        </a>\n\n        <Tooltip content={\"View step as plain text\"}>\n          <a\n            href={`log?nodeId=${props.step.id}`}\n            className={\"jenkins-button jenkins-button--tertiary\"}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M384 224v184a40 40 0 01-40 40H104a40 40 0 01-40-40V168a40 40 0 0140-40h167.48M336 64h112v112M224 288L440 72\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n            </svg>\n          </a>\n        </Tooltip>\n      </div>\n\n      {props.isExpanded && (\n        <div style={{ paddingTop: \"0.5rem\" }}>\n          {getTruncatedLogWarning()}\n          <Suspense>\n            <ConsoleLogStream\n              logBuffer={props.stepBuffer}\n              onMoreConsoleClick={props.onMoreConsoleClick}\n              step={props.step}\n              maxHeightScale={0.65}\n            />\n          </Suspense>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport type ConsoleLogCardProps = {\n  step: StepInfo;\n  stepBuffer: StepLogBufferInfo;\n  isExpanded: boolean;\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n};\n"],"file":"assets/PipelineConsole-ClcDYUH9.js"}